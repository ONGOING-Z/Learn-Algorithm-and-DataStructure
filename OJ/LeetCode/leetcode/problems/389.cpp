#include <iostream>
#include <stdio.h>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <map>
#include <string>
#include <set>
#include <stack>
#include <cmath>
using namespace std;

/* Leetcode */
/* Type:  */
/* 题目信息 */
/*
 *389. Find the Difference
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
Example 3:

Input: s = "a", t = "aa"
Output: "a"
Example 4:

Input: s = "ae", t = "aea"
Output: "a"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lower-case English letters.
 */

/* my solution */
// solution-1, 8ms, defeat 35.09%
class Solution {
public:
    char findTheDifference(string s, string t) {
        map<char, int> mps;
        // map for s
        for (char c : s) {
            mps[c]++;
        }
        // map for t
        map<char, int> mpt;
        for (char c : t) {
            mpt[c]++;
        }
        
        for (char c : t) {
            if (!mps[c])
                return c;
            if (mps[c] != mpt[c])
                return c;
        }
        return NULL;
    }
};

// 上边的代码更新一下,不必有两个map结构的

class Solution {
public:
    char findTheDifference(string s, string t) {
        map<char, int> mps;
        // map for s
        for (char c : s) {
            mps[c]++;
        }
        
        for (char c : t) {
            if (!mps[c])
                return c;
            mps[c]--; // 如果多出来的那个字母是相同的,就次数减一次
        }
        return NULL;
    }
};
/* better solution */
// solution-2, 8ms, defeat 35.09%
// sort
class Solution2 {
public:
    char findTheDifference(string s, string t) {
        // sort
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        
        // compare
        for (int i = 0; i < s.size(); i++) {
            if (s[i] != t[i])
                return t[i];
        }
        
        return t.back();
    }
};
// solution-3, 4ms, defeat 73.18%
// xor method
// 找只出现一次的字符
class Solution3 {
public:
    char findTheDifference(string s, string t) {
        char x = 0;
        string mix = s + t;
        for (char c : mix)
            x ^= c;
        return x;
        
    }
};
/* 一些总结 */
// 1. 题意: 给定两个字符串s和t, 找出t和s中多出的那个字母.
//
// 需要注意的点: 
// 1. 
// 2. 
// 3. 

/*
 * main test
 */

int main(void)
{
    Solution solution;

    return 0;
}

