{"./":{"url":"./","title":"Introduction","keywords":"","body":"Algorithms gitbook build 自定义生成文件夹：gitbook build . target_dir "},"array/array.html":{"url":"array/array.html","title":"数组","keywords":"","body":"Array "},"array/26.html":{"url":"array/26.html","title":"26","keywords":"","body":"/ Type: array / 26. Remove Duplicates from Sorted Array Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. Clarification: Confused why the returned value is an integer but your answer is an array? Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well. Internally you can think of this: // nums is passed in by reference. (i.e., without making a copy) int len = removeDuplicates(nums); // any modification to nums in your function would be known by the caller. // using the length returned by your function, it prints the first len elements. for (int i = 0; i Example 1: Input: nums = [1,1,2] Output: 2, nums = [1,2] Explanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the returned length. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4] Explanation: Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn't matter what values are set beyond the returned length. Constraints: 0 104 -104 / /* my solution */ // solution-x, ms, defeat % /* better solution */ // solution-1, 68ms, defeat 19.75% // 使用另一个数组保存结果，最后再赋值到原数组。 #include #include #include #include #include using namespace std; class Solution { public: int removeDuplicates(vector& nums) { vector temp; for (int i = 0; i 题意: 去除数组中的重复元素，保持元素的唯一。 "},"string/string.html":{"url":"string/string.html","title":"字符串","keywords":"","body":"String "},"string/67.html":{"url":"string/67.html","title":"67","keywords":"","body":"/ Leetcode / / Type: Math / / 题目信息 / / 67. Add Binary Given two binary strings, return their sum (also a binary string). The input strings are both non-empty and contains only characters 1 or 0. Example 1: Input: a = \"11\", b = \"1\" Output: \"100\" Example 2: Input: a = \"1010\", b = \"1011\" Output: \"10101\" Constraints: Each string consists only of '0' or '1' characters. 1 CPP class Solution { public: string addBinary(string a, string b) { int lenA = a.size() - 1; int lenB = b.size() - 1; int carry = 0; string res = \"\"; while (lenA >= 0 || lenB >= 0 || carry) { if (lenA >= 0) { carry += a[lenA] == '0' ? 0 : 1; lenA--; } if (lenB >= 0) { carry += b[lenB] == '0' ? 0 : 1; lenB--; } res = ((carry % 2) == 0 ? \"0\" : \"1\") + res; carry /= 2; } return res; } }; JAVA class Solution { public String addBinary(String a, String b) { int lenA = a.length() - 1; int lenB = b.length() - 1; int carry = 0; String res = \"\"; while (lenA >= 0 || lenB >= 0 || carry > 0) { if (lenA >= 0) { carry += a.charAt(lenA) == '0' ? 0 : 1; lenA--; } if (lenB >= 0) { carry += b.charAt(lenB) == '0' ? 0 : 1; lenB--; } // 这里的前面加'0'相当于站位符号，因为题目中已经明确说明了 // a 和 b 是头部非0的字符串。 // \"10\" + \"10\" // 0 + 0 = 0, carry = 0, res = 0 // 1 + 1 = 2, carry = 1, res = \"0\" + \"0\" = \"00\" // carry = 1, res = \"1\" + \"00\" = \"100\" res = ((carry % 2) == 0 ? \"0\" : \"1\") + res; carry /= 2; // 给前一位计算是否进位，下一次遍历使用 } return res; } } 注意 从后往前开始遍历 carry % 2与 carry / 2容易混 "},"string/709.html":{"url":"string/709.html","title":"709","keywords":"","body":"709 - To lower case Given a string s, return the string after replacing every uppercase letter with the same lowercase letter. Example 1: Input: s = \"Hello\" Output: \"hello\" Example 2: Input: s = \"here\" Output: \"here\" Example 3: Input: s = \"LOVELY\" Output: \"lovely\" Constraints: 1 use apiclass Solution { public String toLowerCase(String s) { return s.toLowerCase(); } } 自行实现 class Solution { public String toLowerCase(String s) { StringBuilder res = new StringBuilder(); for (int i = 0; i = 65 && ch 需要注意的是 [a, z] 范围是 [65, 90] [A, Z] 范围是 [97, 122] "},"string/796.html":{"url":"string/796.html","title":"796","keywords":"","body":"796 type: string Problem Info Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s. A shift on s consists of moving the leftmost character of s to the rightmost position. For example, if s = \"abcde\", then it will be \"bcdea\" after one shift. Example 1: Input: s = \"abcde\", goal = \"cdeab\" Output: true Example 2: Input: s = \"abcde\", goal = \"abced\" Output: false Constraints: 1 Answer class Solution { public boolean rotateString(String s, String goal) { if (s.length() != goal.length()) return false; return (s + s).contains(goal); } } Attention s + s 中包含 s 字符串旋转的所有情况，所以只要查看 s + s 后的结果是否包含 goal 即可。 "},"stack/stack.html":{"url":"stack/stack.html","title":"棧","keywords":"","body":"Stack "},"hashMap/hashMap.html":{"url":"hashMap/hashMap.html","title":"hash","keywords":"","body":"HashMap "},"hashMap/496.html":{"url":"hashMap/496.html","title":"496","keywords":"","body":"496.md type: hashMap difficulty: easy Problem Info 两个数组num1, num2, 其中num1是num2的子集，求对num1中的每个数，得到对应num2同等数字右侧较近的大值。 Answer - 1 class Solution { public int[] nextGreaterElement(int[] nums1, int[] nums2) { Map nums2Map = new HashMap<>(); // put {num: index} into map for (int i = 0; i time: 2ms beat 98.54% Answer - 2 Attention "},"tree/tree.html":{"url":"tree/tree.html","title":"树","keywords":"","body":"Tree "},"graph/graph.html":{"url":"graph/graph.html","title":"图","keywords":"","body":"Graph "}}